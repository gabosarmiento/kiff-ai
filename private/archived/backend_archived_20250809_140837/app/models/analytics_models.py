"""
Agentic Analytics Models for User Activity Monitoring
====================================================

Models for tracking user interactions and generating insights.
"""

from sqlalchemy import Column, Integer, String, DateTime, Text, Boolean, Float, JSON
from sqlalchemy.ext.declarative import declarative_base
from datetime import datetime
from enum import Enum
import uuid

from app.core.database import Base

class EventType(str, Enum):
    """Types of user events to track"""
    PROMPT_SUBMITTED = "prompt_submitted"
    APP_BUILD_REQUESTED = "app_build_requested"
    BUILD_SUCCESS = "build_success"
    BUILD_FAILED = "build_failed"
    BUILD_RETRY = "build_retry"
    APP_GENERATED = "app_generated"
    USER_LOGIN = "user_login"
    USER_LOGOUT = "user_logout"
    PAGE_VIEW = "page_view"
    ERROR_OCCURRED = "error_occurred"
    KNOWLEDGE_SEARCH = "knowledge_search"
    API_GALLERY_VIEW = "api_gallery_view"

class AlertSeverity(str, Enum):
    """Alert severity levels"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"

class UserActivityEvent(Base):
    """Track all user activity events for analysis"""
    __tablename__ = "user_activity_events"
    
    id = Column(Integer, primary_key=True, index=True)
    event_id = Column(String, unique=True, default=lambda: str(uuid.uuid4()), index=True)
    user_id = Column(Integer, index=True)
    tenant_id = Column(String, index=True)
    event_type = Column(String, index=True)  # EventType enum
    
    # Event details
    prompt_text = Column(Text, nullable=True)  # For prompt events
    app_name = Column(String, nullable=True)  # For app build events
    error_message = Column(Text, nullable=True)  # For error events
    page_url = Column(String, nullable=True)  # For page view events
    
    # Timing and performance
    duration_ms = Column(Integer, nullable=True)  # Time taken for the event
    timestamp = Column(DateTime, default=datetime.utcnow, index=True)
    
    # Additional metadata
    event_metadata = Column(JSON, nullable=True)  # Flexible JSON for extra data
    user_agent = Column(String, nullable=True)
    ip_address = Column(String, nullable=True)
    
    # Session tracking
    session_id = Column(String, index=True)
    
    def __repr__(self):
        return f"<UserActivityEvent(id={self.id}, type={self.event_type}, user_id={self.user_id})>"

class AgenticInsight(Base):
    """Insights generated by the monitoring agent"""
    __tablename__ = "agentic_insights"
    
    id = Column(Integer, primary_key=True, index=True)
    insight_id = Column(String, unique=True, default=lambda: str(uuid.uuid4()), index=True)
    
    # User and context
    user_id = Column(Integer, index=True, nullable=True)  # Null for system-wide insights
    tenant_id = Column(String, index=True, nullable=True)
    
    # Insight details
    issue_type = Column(String, index=True)  # e.g., "repeated_failures", "prompt_confusion"
    severity = Column(String, default=AlertSeverity.MEDIUM)  # AlertSeverity enum
    title = Column(String)
    description = Column(Text)
    suggested_action = Column(Text)
    
    # Analysis data
    events_analyzed = Column(Integer)  # Number of events that led to this insight
    confidence_score = Column(Float)  # 0.0 to 1.0 confidence in the insight
    
    # Status
    is_resolved = Column(Boolean, default=False)
    resolved_at = Column(DateTime, nullable=True)
    resolved_by = Column(Integer, nullable=True)  # Admin user ID
    
    # Timestamps
    created_at = Column(DateTime, default=datetime.utcnow, index=True)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Agent metadata
    agent_version = Column(String)  # Version of the monitoring agent
    analysis_metadata = Column(JSON)  # Raw analysis data
    
    def __repr__(self):
        return f"<AgenticInsight(id={self.id}, type={self.issue_type}, user_id={self.user_id})>"

class MonitoringAgentRun(Base):
    """Track monitoring agent execution"""
    __tablename__ = "monitoring_agent_runs"
    
    id = Column(Integer, primary_key=True, index=True)
    run_id = Column(String, unique=True, default=lambda: str(uuid.uuid4()), index=True)
    
    # Execution details
    started_at = Column(DateTime, default=datetime.utcnow)
    completed_at = Column(DateTime, nullable=True)
    status = Column(String, default="running")  # running, completed, failed
    
    # Analysis results
    events_processed = Column(Integer, default=0)
    insights_generated = Column(Integer, default=0)
    alerts_created = Column(Integer, default=0)
    
    # Performance metrics
    execution_time_ms = Column(Integer, nullable=True)
    memory_usage_mb = Column(Float, nullable=True)
    
    # Error handling
    error_message = Column(Text, nullable=True)
    error_traceback = Column(Text, nullable=True)
    
    # Agent metadata
    agent_version = Column(String)
    config_used = Column(JSON)  # Agent configuration for this run
    
    def __repr__(self):
        return f"<MonitoringAgentRun(id={self.id}, status={self.status}, insights={self.insights_generated})>"

class UserBehaviorPattern(Base):
    """Detected user behavior patterns"""
    __tablename__ = "user_behavior_patterns"
    
    id = Column(Integer, primary_key=True, index=True)
    pattern_id = Column(String, unique=True, default=lambda: str(uuid.uuid4()), index=True)
    
    user_id = Column(Integer, index=True)
    tenant_id = Column(String, index=True)
    
    # Pattern details
    pattern_type = Column(String, index=True)  # e.g., "prompt_iteration", "build_failure_cycle"
    pattern_name = Column(String)
    description = Column(Text)
    
    # Pattern metrics
    frequency = Column(Integer)  # How often this pattern occurs
    avg_duration_minutes = Column(Float)  # Average time for this pattern
    success_rate = Column(Float)  # 0.0 to 1.0 success rate
    
    # Detection metadata
    first_detected = Column(DateTime, default=datetime.utcnow)
    last_seen = Column(DateTime, default=datetime.utcnow)
    confidence_score = Column(Float)  # 0.0 to 1.0 confidence in pattern detection
    
    # Associated events
    sample_event_ids = Column(JSON)  # List of event IDs that show this pattern
    
    def __repr__(self):
        return f"<UserBehaviorPattern(id={self.id}, type={self.pattern_type}, user_id={self.user_id})>"
