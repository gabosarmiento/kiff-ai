# Docker Compose for AGNO-native TradeForge AI Sandbox Environment
# Phase 2: Container orchestration for isolated trading agent execution

version: '3.8'

services:
  # Main TradeForge AI Application
  tradeforge-api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/tradeforge
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # For sandbox container management
      - ./sandbox-logs:/app/sandbox-logs
    depends_on:
      - postgres
      - redis
    networks:
      - tradeforge-network
      - sandbox-network

  # PostgreSQL Database with PgVector
  postgres:
    image: pgvector/pgvector:pg16
    environment:
      - POSTGRES_DB=tradeforge
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - tradeforge-network

  # Redis for Caching and Session Management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tradeforge-network

  # Frontend Application
  tradeforge-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    depends_on:
      - tradeforge-api
    networks:
      - tradeforge-network

  # Sandbox Container Template (dynamically created)
  # This is a template - actual sandbox containers are created dynamically
  sandbox-template:
    image: python:3.11-slim
    profiles: ["template"]  # This prevents it from starting automatically
    environment:
      - PYTHONPATH=/app
      - SANDBOX_MODE=true
    volumes:
      - ./sandbox-logs:/app/logs
    working_dir: /app
    command: ["python", "-c", "import time; time.sleep(3600)"]  # Keep alive
    networks:
      - sandbox-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Monitoring and Observability
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - tradeforge-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - tradeforge-network

  # Log Aggregation
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - tradeforge-network

  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./sandbox-logs:/var/log/sandbox
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - tradeforge-network

networks:
  tradeforge-network:
    driver: bridge
  sandbox-network:
    driver: bridge
    internal: false  # Allow internet access for trading APIs

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  loki_data:

# Sandbox Management Scripts
x-sandbox-scripts: &sandbox-scripts
  # These would be used by the SandboxManager for dynamic container creation
  sandbox-create: |
    docker run -d \
      --name tradeforge-sandbox-${SANDBOX_ID} \
      --network tradeforge_sandbox-network \
      --memory 512m \
      --cpus 0.5 \
      -e SANDBOX_ID=${SANDBOX_ID} \
      -e USER_ID=${USER_ID} \
      -e PYTHONPATH=/app \
      -v ./sandbox-logs:/app/logs \
      python:3.11-slim \
      python -c "
        import time
        import os
        print(f'Sandbox {os.environ[\"SANDBOX_ID\"]} started for user {os.environ[\"USER_ID\"]}')
        # Install AGNO and dependencies
        os.system('pip install agno==1.7.6 pandas numpy httpx')
        # Keep container alive
        while True:
            time.sleep(60)
      "

  sandbox-stop: |
    docker stop tradeforge-sandbox-${SANDBOX_ID}
    docker rm tradeforge-sandbox-${SANDBOX_ID}
