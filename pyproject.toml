[tool.poetry]
name = "kiff-ai"
version = "0.1.0"
description = "AGNO-native SaaS platform for AI-powered trading automation and multi-agent systems"
authors = ["Kiff Team <team@kiff.ai>"]
readme = "README.md"
packages = [{include = "app", from = "backend"}]

[tool.poetry.dependencies]
python = "^3.12"
# FastAPI and web framework
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
websockets = "^13.0"

# Database
sqlalchemy = "^2.0.23"
psycopg2-binary = "^2.9.9"
alembic = "^1.12.1"

# Redis for caching and sessions
redis = "^5.0.1"
aioredis = "^2.0.1"

# HTTP client
httpx = ">=0.27.2,<0.29.0"
aiohttp = "^3.9.1"

# Data validation and serialization
pydantic = {extras = ["email"], version = "^2.11.7"}
pydantic-settings = "^2.1.0"

# Authentication and security
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = ">=0.0.6"

# LLM integrations
openai = "^1.3.8"
groq = "^0.30.0"

# Email service
resend = ">=0.6.0"

# AGNO Framework for multi-agent systems
agno = "^1.7.7"

# Trading APIs
python-binance = "^1.0.19"
ccxt = "^4.1.64"

# Data processing
pandas = "^2.1.4"
numpy = "^1.25.2"

# Background tasks
celery = "^5.3.4"
flower = "^2.0.1"

# Monitoring and logging
structlog = "^23.2.0"
prometheus-client = ">=0.19.0"

# Environment and configuration
python-dotenv = "^1.0.0"
asyncpg = "^0.30.0"
cryptography = "^45.0.5"
yfinance = "^0.2.65"
psutil = "^7.0.0"
pgvector = "^0.4.1"
lancedb = "^0.24.2"
docker = "^7.1.0"
jinja2 = "^3.1.6"
crawl4ai = "^0.7.2"
psycopg = {extras = ["binary"], version = "^3.2.9"}
exa-py = "^1.14.20"
playwright = "^1.54.0"
torch = "2.2.2"
sentence-transformers = "^5.0.0"
chonkie = "^1.1.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
black = "^23.11.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
mypy = "^1.7.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "agno.*",
    "ccxt.*",
    "binance.*",
    "resend.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
